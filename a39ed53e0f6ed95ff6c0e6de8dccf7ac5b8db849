{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0230f280_acd385f3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2023-08-21T11:12:40Z",
      "side": 1,
      "message": "Gerrit\u0027s",
      "range": {
        "startLine": 7,
        "startChar": 15,
        "endLine": 7,
        "endChar": 24
      },
      "revId": "a39ed53e0f6ed95ff6c0e6de8dccf7ac5b8db849",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ce9f0df_607c7821",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2023-08-22T05:55:01Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "0230f280_acd385f3",
      "range": {
        "startLine": 7,
        "startChar": 15,
        "endLine": 7,
        "endChar": 24
      },
      "revId": "a39ed53e0f6ed95ff6c0e6de8dccf7ac5b8db849",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6840d9b5_1b6033a6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2023-08-21T11:12:40Z",
      "side": 1,
      "message": "It might be obvious, but consider adding a \"because\" section here.\n\nAlso, would you mind expanding on how the filtering of static resources from the OAuthFilter relates to the sessions leak error?\n\nFrom what I understood, utltimately, this relates to Jetty session expiration?",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 47
      },
      "revId": "a39ed53e0f6ed95ff6c0e6de8dccf7ac5b8db849",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a87a4d48_e2fc38f5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2023-08-22T05:55:01Z",
      "side": 1,
      "message": "Here is why filtering out all _static_ helps:\nAt the moment sessions obtained from Jetty never expire so that problem is not solved. Note that if static resources are filtered with `OAuthFilter` calls to get them are enriched with Jetty session (to be clear for no reason). Resources (fonts in this case) are static but every now and then (upgrade etc) they are re-read from clients leading to 19 extra session objects per client, per browser. IOW this change doesn\u0027t fix the problem of not expiring sessions but reduces the number of them by making sure that all _static_ resources (especially those 19 fonts) are not filtered with `OAuthFilter`.",
      "parentUuid": "6840d9b5_1b6033a6",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 47
      },
      "revId": "a39ed53e0f6ed95ff6c0e6de8dccf7ac5b8db849",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c13632e_275841c9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-08-22T10:03:21Z",
      "side": 1,
      "message": "\u003e Here is why filtering out all _static_ helps:\n\u003e At the moment sessions obtained from Jetty never expire so that problem is not solved. Note that if static resources are filtered with `OAuthFilter` calls to get them are enriched with Jetty session (to be clear for no reason).\n\nCorrect, because only dynamic resources (including HTML because they are dynamically expanded) need the context and their associated injections.\n\n\u003e Resources (fonts in this case) are static but every now and then (upgrade etc) they are re-read from clients leading to 19 extra session objects per client\n\nThat is still obscure to me though: the client has the JSESSIONID cookie which is sent to the server *also* for static resources.\nEven if the session isn\u0027t needed, it should have not created a new one for every static resource, isn\u0027t it?\n\nI believe we have a bug in Gerrit core _somewhere_ anyway.",
      "parentUuid": "a87a4d48_e2fc38f5",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 47
      },
      "revId": "a39ed53e0f6ed95ff6c0e6de8dccf7ac5b8db849",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea12ab0a_ff49c505",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2023-08-23T06:37:04Z",
      "side": 1,
      "message": "\u003e That is still obscure to me though: the client has the JSESSIONID cookie which is sent to the server also for static resources.\n\nNot sure if that is the case but [OAuthFilter.isAuthenticatedRestCall](https://gerrit.googlesource.com/plugins/github/+/refs/heads/master/github-oauth/src/main/java/com/googlesource/gerrit/plugins/github/oauth/OAuthFilter.java#84) expects the `X-Gerrit-Auth` header to be present and AFAICT that is not the case...",
      "parentUuid": "1c13632e_275841c9",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 47
      },
      "revId": "a39ed53e0f6ed95ff6c0e6de8dccf7ac5b8db849",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3e268a4_db00f71d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-08-25T19:14:59Z",
      "side": 1,
      "message": "Sure, but I think the browser sends *ALL* client side cookies, including `JSESSIONID` for all static resources. I was not expecting the Servlet container to create one session per request.",
      "parentUuid": "ea12ab0a_ff49c505",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 47
      },
      "revId": "a39ed53e0f6ed95ff6c0e6de8dccf7ac5b8db849",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c1bec12_24285d95",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-08-25T21:45:36Z",
      "side": 1,
      "message": "When the client is not authenticated (e.g. during the OAUTH exchange) there are definitely multiple `JSESSIONID` created and exchanged between the browser and the server.\n\nHowever, I do see also multiple `GitHubLogin` objects created for the same session.\n\nSee below (first value \u003d `JSESSIONID` and the second the object-id of `GitHubLogin`):\n```\nnode01g4adml5he5w8bjqj08ux8jz40.node0, GitHubLogin: 1276560755\nnode01g4adml5he5w8bjqj08ux8jz40.node0, GitHubLogin: 1426788102\nnode01g4adml5he5w8bjqj08ux8jz40.node0, GitHubLogin: 1339861730\nnode01g4adml5he5w8bjqj08ux8jz40.node0, GitHubLogin: 1016619697\nnode01g4adml5he5w8bjqj08ux8jz40.node0, GitHubLogin: 1259641374\nnode01g4adml5he5w8bjqj08ux8jz40.node0, GitHubLogin: 1420057100\nnode01g4adml5he5w8bjqj08ux8jz40.node0, GitHubLogin: 1598875482\nnode01g4adml5he5w8bjqj08ux8jz40.node0, GitHubLogin: 749844088\nnode01g4adml5he5w8bjqj08ux8jz40.node0, GitHubLogin: 336496854\nnode01g4adml5he5w8bjqj08ux8jz40.node0, GitHubLogin: 346111105\nnode01g4adml5he5w8bjqj08ux8jz40.node0, GitHubLogin: 197668063\nnode01g4adml5he5w8bjqj08ux8jz40.node0, GitHubLogin: 1974687008\nnode01g4adml5he5w8bjqj08ux8jz40.node0, GitHubLogin: 131039998\nnode01g4adml5he5w8bjqj08ux8jz40.node0, GitHubLogin: 921642152\nnode01g4adml5he5w8bjqj08ux8jz40.node0, GitHubLogin: 1381639382\nnode01g4adml5he5w8bjqj08ux8jz40.node0, GitHubLogin: 792945794\n```\n\nWhat I have discovered is when a user is signed out and then is trying to sign-in again, the browser sends the same `JSESSIONID` cookie but the Servlet Engine creates one HTTP Session per every request ðŸ˜®.\n\n*That* is the culprit of soo many HTTP Sessions created (and never released) which the associated GitHubLogin.\n\nThe issue seems this part of the code:\n```\n      if (gerritCookie !\u003d null \u0026\u0026 httpSession !\u003d null) {\n        String gerritCookieValue \u003d gerritCookie.getValue();\n        String gerritSessionValue \u003d (String) httpSession.getAttribute(\"GerritAccount\");\n\n        if (gerritSessionValue \u003d\u003d null) {\n          httpSession.setAttribute(\"GerritAccount\", gerritCookieValue);\n        } else if (!gerritSessionValue.equals(gerritCookieValue)) {\n          httpSession.invalidate();\n        }\n      }\n```\n\nThe issue here is the invalidation of the HTTP session for every call because the cookie we have stored in the HTTP session does not correspond to the one that the browser sends, which is expected when we are in the middle of a new authentication phase.\n\nIf I comment out the `httpSession.invalidate()` the problem goes away, even by processing all static resources.\n\nLet me upload a separate change to address this.",
      "parentUuid": "b3e268a4_db00f71d",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 47
      },
      "revId": "a39ed53e0f6ed95ff6c0e6de8dccf7ac5b8db849",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6517ffa4_537a1316",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2023-08-20T06:05:29Z",
      "side": 1,
      "message": "Have also checked that `GitHub` menu entries (like `Profile`, `Repositories`, etc..) still work ðŸ˜„",
      "revId": "a39ed53e0f6ed95ff6c0e6de8dccf7ac5b8db849",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bda6ac60_687c8b32",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-08-25T21:45:36Z",
      "side": 1,
      "message": "I believe this change is useful but *does not* address the root cause of the problem.",
      "revId": "a39ed53e0f6ed95ff6c0e6de8dccf7ac5b8db849",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "a39ed53e0f6ed95ff6c0e6de8dccf7ac5b8db849",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "a39ed53e0f6ed95ff6c0e6de8dccf7ac5b8db849",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "a39ed53e0f6ed95ff6c0e6de8dccf7ac5b8db849",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "a39ed53e0f6ed95ff6c0e6de8dccf7ac5b8db849",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "a39ed53e0f6ed95ff6c0e6de8dccf7ac5b8db849",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}